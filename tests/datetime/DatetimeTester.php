<?php //[STAMP] 2ec49660277a4221781809e76d9dfd0d

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile


use Codeception\Module\DatetimeHelper;
use Codeception\Module\Date;

/**
 * Inherited Methods
 * @method void wantToTest($text)
 * @method void wantTo($text)
 * @method void execute($callable)
 * @method void expectTo($prediction)
 * @method void expect($prediction)
 * @method void amGoingTo($argumentation)
 * @method void am($role)
 * @method void lookForwardTo($achieveValue)
 * @method void comment($description)
 * @method void haveFriend($name, $actorClass = null)
*/
class DatetimeTester extends \Codeception\Actor
{
   
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is today's date.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateIsToday()
     */
    public function canSeeDateIsToday($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateIsToday', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is today's date.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateIsToday()
     */
    public function seeDateIsToday($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateIsToday', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not today's date.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateIsToday()
     */
    public function cantSeeDateIsToday($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateIsToday', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not today's date.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateIsToday()
     */
    public function dontSeeDateIsToday($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateIsToday', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is tomorrows date.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateIsTomorrow()
     */
    public function canSeeDateIsTomorrow($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateIsTomorrow', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is tomorrows date.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateIsTomorrow()
     */
    public function seeDateIsTomorrow($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateIsTomorrow', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not tomorrows date.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateIsTomorrow()
     */
    public function cantSeeDateIsTomorrow($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateIsTomorrow', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not tomorrows date.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateIsTomorrow()
     */
    public function dontSeeDateIsTomorrow($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateIsTomorrow', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was yesterdays date.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateWasYesterday()
     */
    public function canSeeDateWasYesterday($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateWasYesterday', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was yesterdays date.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateWasYesterday()
     */
    public function seeDateWasYesterday($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateWasYesterday', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was not yesterdays date.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateWasYesterday()
     */
    public function cantSeeDateWasYesterday($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateWasYesterday', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was not yesterdays date.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateWasYesterday()
     */
    public function dontSeeDateWasYesterday($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateWasYesterday', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is in a given number of days.
     *
     * @param string $date
     * @param int    $days
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateIsInDays()
     */
    public function canSeeDateIsInDays($date, $days) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateIsInDays', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is in a given number of days.
     *
     * @param string $date
     * @param int    $days
     * @see \Codeception\Module\Date::seeDateIsInDays()
     */
    public function seeDateIsInDays($date, $days) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateIsInDays', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not in a given number of days.
     *
     * @param string $date
     * @param int    $days
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateIsInDays()
     */
    public function cantSeeDateIsInDays($date, $days) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateIsInDays', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not in a given number of days.
     *
     * @param string $date
     * @param int    $days
     * @see \Codeception\Module\Date::dontSeeDateIsInDays()
     */
    public function dontSeeDateIsInDays($date, $days) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateIsInDays', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was in a given number of days.
     *
     * @param string $date
     * @param int    $days
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateWasInDays()
     */
    public function canSeeDateWasInDays($date, $days) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateWasInDays', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was in a given number of days.
     *
     * @param string $date
     * @param int    $days
     * @see \Codeception\Module\Date::seeDateWasInDays()
     */
    public function seeDateWasInDays($date, $days) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateWasInDays', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was in a given number of days.
     *
     * @param string $date
     * @param int    $days
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateWasInDays()
     */
    public function cantSeeDateWasInDays($date, $days) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateWasInDays', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was in a given number of days.
     *
     * @param string $date
     * @param int    $days
     * @see \Codeception\Module\Date::dontSeeDateWasInDays()
     */
    public function dontSeeDateWasInDays($date, $days) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateWasInDays', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is next week.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateIsNextWeek()
     */
    public function canSeeDateIsNextWeek($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateIsNextWeek', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is next week.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateIsNextWeek()
     */
    public function seeDateIsNextWeek($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateIsNextWeek', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not next week.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateIsNextWeek()
     */
    public function cantSeeDateIsNextWeek($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateIsNextWeek', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not next week.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateIsNextWeek()
     */
    public function dontSeeDateIsNextWeek($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateIsNextWeek', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is in a given number of weeks.
     *
     * @param string $date
     * @param int    $weeks
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateIsInWeeks()
     */
    public function canSeeDateIsInWeeks($date, $weeks) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateIsInWeeks', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is in a given number of weeks.
     *
     * @param string $date
     * @param int    $weeks
     * @see \Codeception\Module\Date::seeDateIsInWeeks()
     */
    public function seeDateIsInWeeks($date, $weeks) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateIsInWeeks', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is in a given number of weeks.
     *
     * @param string $date
     * @param int    $weeks
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateIsInWeeks()
     */
    public function cantSeeDateIsInWeeks($date, $weeks) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateIsInWeeks', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is in a given number of weeks.
     *
     * @param string $date
     * @param int    $weeks
     * @see \Codeception\Module\Date::dontSeeDateIsInWeeks()
     */
    public function dontSeeDateIsInWeeks($date, $weeks) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateIsInWeeks', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was last week.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateWasLastWeek()
     */
    public function canSeeDateWasLastWeek($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateWasLastWeek', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was last week.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateWasLastWeek()
     */
    public function seeDateWasLastWeek($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateWasLastWeek', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was not last week.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateWasLastWeek()
     */
    public function cantSeeDateWasLastWeek($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateWasLastWeek', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was not last week.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateWasLastWeek()
     */
    public function dontSeeDateWasLastWeek($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateWasLastWeek', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was in a given number of weeks.
     *
     * @param string $date
     * @param int    $weeks
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateWasInWeeks()
     */
    public function canSeeDateWasInWeeks($date, $weeks) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateWasInWeeks', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was in a given number of weeks.
     *
     * @param string $date
     * @param int    $weeks
     * @see \Codeception\Module\Date::seeDateWasInWeeks()
     */
    public function seeDateWasInWeeks($date, $weeks) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateWasInWeeks', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was in a given number of weeks.
     *
     * @param string $date
     * @param int    $weeks
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateWasInWeeks()
     */
    public function cantSeeDateWasInWeeks($date, $weeks) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateWasInWeeks', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was in a given number of weeks.
     *
     * @param string $date
     * @param int    $weeks
     * @see \Codeception\Module\Date::dontSeeDateWasInWeeks()
     */
    public function dontSeeDateWasInWeeks($date, $weeks) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateWasInWeeks', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is next month.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateIsNextMonth()
     */
    public function canSeeDateIsNextMonth($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateIsNextMonth', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is next month.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateIsNextMonth()
     */
    public function seeDateIsNextMonth($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateIsNextMonth', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not next month.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateIsNextMonth()
     */
    public function cantSeeDateIsNextMonth($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateIsNextMonth', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not next month.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateIsNextMonth()
     */
    public function dontSeeDateIsNextMonth($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateIsNextMonth', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is in a given number of months.
     *
     * @param string $date
     * @param int    $months
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateIsInMonths()
     */
    public function canSeeDateIsInMonths($date, $months) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateIsInMonths', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is in a given number of months.
     *
     * @param string $date
     * @param int    $months
     * @see \Codeception\Module\Date::seeDateIsInMonths()
     */
    public function seeDateIsInMonths($date, $months) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateIsInMonths', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not in a given number of months.
     *
     * @param string $date
     * @param int    $months
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateIsInMonths()
     */
    public function cantSeeDateIsInMonths($date, $months) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateIsInMonths', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not in a given number of months.
     *
     * @param string $date
     * @param int    $months
     * @see \Codeception\Module\Date::dontSeeDateIsInMonths()
     */
    public function dontSeeDateIsInMonths($date, $months) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateIsInMonths', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was last month.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateWasLastMonth()
     */
    public function canSeeDateWasLastMonth($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateWasLastMonth', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was last month.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateWasLastMonth()
     */
    public function seeDateWasLastMonth($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateWasLastMonth', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was not last month.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateWasLastMonth()
     */
    public function cantSeeDateWasLastMonth($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateWasLastMonth', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was not last month.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateWasLastMonth()
     */
    public function dontSeeDateWasLastMonth($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateWasLastMonth', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was in a given number of months.
     *
     * @param string $date
     * @param int    $months
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateWasInMonths()
     */
    public function canSeeDateWasInMonths($date, $months) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateWasInMonths', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was in a given number of months.
     *
     * @param string $date
     * @param int    $months
     * @see \Codeception\Module\Date::seeDateWasInMonths()
     */
    public function seeDateWasInMonths($date, $months) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateWasInMonths', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was not in a given number of years.
     *
     * @param string $date
     * @param int    $months
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateWasInMonths()
     */
    public function cantSeeDateWasInMonths($date, $months) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateWasInMonths', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was not in a given number of years.
     *
     * @param string $date
     * @param int    $months
     * @see \Codeception\Module\Date::dontSeeDateWasInMonths()
     */
    public function dontSeeDateWasInMonths($date, $months) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateWasInMonths', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is next year.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateIsNextYear()
     */
    public function canSeeDateIsNextYear($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateIsNextYear', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is next year.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateIsNextYear()
     */
    public function seeDateIsNextYear($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateIsNextYear', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not next year.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateIsNextYear()
     */
    public function cantSeeDateIsNextYear($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateIsNextYear', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not next year.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateIsNextYear()
     */
    public function dontSeeDateIsNextYear($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateIsNextYear', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is in a given number of years.
     *
     * @param string $date
     * @param int    $years
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateIsInYears()
     */
    public function canSeeDateIsInYears($date, $years) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateIsInYears', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is in a given number of years.
     *
     * @param string $date
     * @param int    $years
     * @see \Codeception\Module\Date::seeDateIsInYears()
     */
    public function seeDateIsInYears($date, $years) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateIsInYears', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is in not a given number of years.
     *
     * @param string $date
     * @param int    $years
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateIsInYears()
     */
    public function cantSeeDateIsInYears($date, $years) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateIsInYears', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is in not a given number of years.
     *
     * @param string $date
     * @param int    $years
     * @see \Codeception\Module\Date::dontSeeDateIsInYears()
     */
    public function dontSeeDateIsInYears($date, $years) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateIsInYears', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was last year.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateWasLastYear()
     */
    public function canSeeDateWasLastYear($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateWasLastYear', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was last year.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateWasLastYear()
     */
    public function seeDateWasLastYear($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateWasLastYear', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was not last year.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateWasLastYear()
     */
    public function cantSeeDateWasLastYear($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateWasLastYear', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was not last year.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateWasLastYear()
     */
    public function dontSeeDateWasLastYear($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateWasLastYear', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was in a given number of years.
     *
     * @param string $date
     * @param int    $years
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateWasInYears()
     */
    public function canSeeDateWasInYears($date, $years) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateWasInYears', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was in a given number of years.
     *
     * @param string $date
     * @param int    $years
     * @see \Codeception\Module\Date::seeDateWasInYears()
     */
    public function seeDateWasInYears($date, $years) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateWasInYears', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was not in a given number of years.
     *
     * @param string $date
     * @param int    $years
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateWasInYears()
     */
    public function cantSeeDateWasInYears($date, $years) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateWasInYears', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date was not in a given number of years.
     *
     * @param string $date
     * @param int    $years
     * @see \Codeception\Module\Date::dontSeeDateWasInYears()
     */
    public function dontSeeDateWasInYears($date, $years) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateWasInYears', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is a Monday.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateIsMonday()
     */
    public function canSeeDateIsMonday($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateIsMonday', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is a Monday.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateIsMonday()
     */
    public function seeDateIsMonday($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateIsMonday', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not a Monday.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateIsMonday()
     */
    public function cantSeeDateIsMonday($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateIsMonday', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not a Monday.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateIsMonday()
     */
    public function dontSeeDateIsMonday($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateIsMonday', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is a Tuesday.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateIsTuesday()
     */
    public function canSeeDateIsTuesday($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateIsTuesday', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is a Tuesday.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateIsTuesday()
     */
    public function seeDateIsTuesday($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateIsTuesday', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not a Tuesday.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateIsTuesday()
     */
    public function cantSeeDateIsTuesday($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateIsTuesday', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not a Tuesday.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateIsTuesday()
     */
    public function dontSeeDateIsTuesday($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateIsTuesday', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is a Wednesday.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateIsWednesday()
     */
    public function canSeeDateIsWednesday($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateIsWednesday', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is a Wednesday.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateIsWednesday()
     */
    public function seeDateIsWednesday($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateIsWednesday', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not a Wednesday.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateIsWednesday()
     */
    public function cantSeeDateIsWednesday($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateIsWednesday', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not a Wednesday.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateIsWednesday()
     */
    public function dontSeeDateIsWednesday($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateIsWednesday', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is a Thursday.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateIsThursday()
     */
    public function canSeeDateIsThursday($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateIsThursday', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is a Thursday.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateIsThursday()
     */
    public function seeDateIsThursday($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateIsThursday', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not a Thursday.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateIsThursday()
     */
    public function cantSeeDateIsThursday($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateIsThursday', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not a Thursday.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateIsThursday()
     */
    public function dontSeeDateIsThursday($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateIsThursday', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is a Friday
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateIsFriday()
     */
    public function canSeeDateIsFriday($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateIsFriday', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is a Friday
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateIsFriday()
     */
    public function seeDateIsFriday($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateIsFriday', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not a Friday.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateIsFriday()
     */
    public function cantSeeDateIsFriday($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateIsFriday', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not a Friday.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateIsFriday()
     */
    public function dontSeeDateIsFriday($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateIsFriday', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is a Saturday.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateIsSaturday()
     */
    public function canSeeDateIsSaturday($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateIsSaturday', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is a Saturday.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateIsSaturday()
     */
    public function seeDateIsSaturday($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateIsSaturday', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not a Saturday.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateIsSaturday()
     */
    public function cantSeeDateIsSaturday($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateIsSaturday', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not a Saturday.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateIsSaturday()
     */
    public function dontSeeDateIsSaturday($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateIsSaturday', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is a Sunday.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateIsSunday()
     */
    public function canSeeDateIsSunday($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateIsSunday', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is a Sunday.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateIsSunday()
     */
    public function seeDateIsSunday($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateIsSunday', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not a Sunday.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateIsSunday()
     */
    public function cantSeeDateIsSunday($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateIsSunday', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not a Sunday.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateIsSunday()
     */
    public function dontSeeDateIsSunday($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateIsSunday', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is a weekday.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateIsWeekday()
     */
    public function canSeeDateIsWeekday($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateIsWeekday', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is a weekday.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateIsWeekday()
     */
    public function seeDateIsWeekday($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateIsWeekday', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not a weekday.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateIsWeekday()
     */
    public function cantSeeDateIsWeekday($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateIsWeekday', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not a weekday.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateIsWeekday()
     */
    public function dontSeeDateIsWeekday($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateIsWeekday', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is a weekend.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateIsWeekend()
     */
    public function canSeeDateIsWeekend($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateIsWeekend', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is a weekend.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateIsWeekend()
     */
    public function seeDateIsWeekend($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateIsWeekend', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not a weekend.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateIsWeekend()
     */
    public function cantSeeDateIsWeekend($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateIsWeekend', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See date is not a weekend.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateIsWeekend()
     */
    public function dontSeeDateIsWeekend($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateIsWeekend', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See that two dates match.
     *
     * @param string $d1
     * @param string $d2
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateMatches()
     */
    public function canSeeDateMatches($d1, $d2) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateMatches', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See that two dates match.
     *
     * @param string $d1
     * @param string $d2
     * @see \Codeception\Module\Date::seeDateMatches()
     */
    public function seeDateMatches($d1, $d2) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateMatches', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See that two dates don't match.
     *
     * @param string $d1
     * @param string $d2
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateMatches()
     */
    public function cantSeeDateMatches($d1, $d2) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateMatches', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See that two dates don't match.
     *
     * @param string $d1
     * @param string $d2
     * @see \Codeception\Module\Date::dontSeeDateMatches()
     */
    public function dontSeeDateMatches($d1, $d2) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateMatches', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is in the future.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateInFuture()
     */
    public function canSeeDateInFuture($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateInFuture', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is in the future.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateInFuture()
     */
    public function seeDateInFuture($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateInFuture', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is not in the future.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateInFuture()
     */
    public function cantSeeDateInFuture($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateInFuture', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is not in the future.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateInFuture()
     */
    public function dontSeeDateInFuture($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateInFuture', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is in the past.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateInPast()
     */
    public function canSeeDateInPast($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateInPast', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is in the past.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateInPast()
     */
    public function seeDateInPast($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateInPast', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is not in the past.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateInPast()
     */
    public function cantSeeDateInPast($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateInPast', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is not in the past.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateInPast()
     */
    public function dontSeeDateInPast($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateInPast', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is within the first quarter of the year.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateInFirstQuarter()
     */
    public function canSeeDateInFirstQuarter($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateInFirstQuarter', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is within the first quarter of the year.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateInFirstQuarter()
     */
    public function seeDateInFirstQuarter($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateInFirstQuarter', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is not within the first quarter of the year.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateInFirstQuarter()
     */
    public function cantSeeDateInFirstQuarter($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateInFirstQuarter', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is not within the first quarter of the year.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateInFirstQuarter()
     */
    public function dontSeeDateInFirstQuarter($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateInFirstQuarter', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is within the second quarter of the year.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateInSecondQuarter()
     */
    public function canSeeDateInSecondQuarter($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateInSecondQuarter', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is within the second quarter of the year.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateInSecondQuarter()
     */
    public function seeDateInSecondQuarter($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateInSecondQuarter', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is not within the second quarter of the year.
     *
     * @param string $date
     * @see \Codeception\Module\Date::donSeeDateInSecondQuarter()
     */
    public function donSeeDateInSecondQuarter($date) {
        return $this->scenario->runStep(new \Codeception\Step\Action('donSeeDateInSecondQuarter', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is within the third quarter of the year.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateInThirdQuarter()
     */
    public function canSeeDateInThirdQuarter($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateInThirdQuarter', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is within the third quarter of the year.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateInThirdQuarter()
     */
    public function seeDateInThirdQuarter($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateInThirdQuarter', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is not within the third quarter of the year.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateInThirdQuarter()
     */
    public function cantSeeDateInThirdQuarter($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateInThirdQuarter', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is not within the third quarter of the year.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateInThirdQuarter()
     */
    public function dontSeeDateInThirdQuarter($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateInThirdQuarter', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is within the forth quarter of the year.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateInFourthQuarter()
     */
    public function canSeeDateInFourthQuarter($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateInFourthQuarter', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is within the forth quarter of the year.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateInFourthQuarter()
     */
    public function seeDateInFourthQuarter($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateInFourthQuarter', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is not within the forth quarter of the year.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateInFourthQuarter()
     */
    public function cantSeeDateInFourthQuarter($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateInFourthQuarter', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is not within the forth quarter of the year.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateInFourthQuarter()
     */
    public function dontSeeDateInFourthQuarter($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateInFourthQuarter', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is within a particular quarter of the year.
     *
     * @param string $date
     * @param int    $quarter
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateInQuarter()
     */
    public function canSeeDateInQuarter($date, $quarter) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateInQuarter', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is within a particular quarter of the year.
     *
     * @param string $date
     * @param int    $quarter
     * @see \Codeception\Module\Date::seeDateInQuarter()
     */
    public function seeDateInQuarter($date, $quarter) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateInQuarter', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is not within a particular quarter of the year.
     *
     * @param string $date
     * @param int    $quarter
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateInQuarter()
     */
    public function cantSeeDateInQuarter($date, $quarter) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateInQuarter', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is not within a particular quarter of the year.
     *
     * @param string $date
     * @param int    $quarter
     * @see \Codeception\Module\Date::dontSeeDateInQuarter()
     */
    public function dontSeeDateInQuarter($date, $quarter) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateInQuarter', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is a leap year.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDateIsLeapYear()
     */
    public function canSeeDateIsLeapYear($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDateIsLeapYear', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is a leap year.
     *
     * @param string $date
     * @see \Codeception\Module\Date::seeDateIsLeapYear()
     */
    public function seeDateIsLeapYear($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDateIsLeapYear', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is not a leap year.
     *
     * @param string $date
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDateIsLeapYear()
     */
    public function cantSeeDateIsLeapYear($date) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDateIsLeapYear', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is not a leap year.
     *
     * @param string $date
     * @see \Codeception\Module\Date::dontSeeDateIsLeapYear()
     */
    public function dontSeeDateIsLeapYear($date) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDateIsLeapYear', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     *
     * @param string $date
     * @param int    $day
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDayInWeek()
     */
    public function canSeeDayInWeek($date, $day) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDayInWeek', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     *
     * @param string $date
     * @param int    $day
     * @see \Codeception\Module\Date::seeDayInWeek()
     */
    public function seeDayInWeek($date, $day) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDayInWeek', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     *
     * @param string $date
     * @param int    $day
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDayInWeek()
     */
    public function cantSeeDayInWeek($date, $day) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDayInWeek', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     *
     * @param string $date
     * @param int    $day
     * @see \Codeception\Module\Date::dontSeeDayInWeek()
     */
    public function dontSeeDayInWeek($date, $day) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDayInWeek', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     *
     * @param string $date
     * @param int    $day
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDayInMonth()
     */
    public function canSeeDayInMonth($date, $day) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDayInMonth', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     *
     * @param string $date
     * @param int    $day
     * @see \Codeception\Module\Date::seeDayInMonth()
     */
    public function seeDayInMonth($date, $day) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDayInMonth', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     *
     * @param string $date
     * @param int    $day
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDayInMonth()
     */
    public function cantSeeDayInMonth($date, $day) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDayInMonth', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     *
     * @param string $date
     * @param int    $day
     * @see \Codeception\Module\Date::dontSeeDayInMonth()
     */
    public function dontSeeDayInMonth($date, $day) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDayInMonth', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     *
     * @param string $date
     * @param int    $day
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeDayInYear()
     */
    public function canSeeDayInYear($date, $day) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeDayInYear', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     *
     * @param string $date
     * @param int    $day
     * @see \Codeception\Module\Date::seeDayInYear()
     */
    public function seeDayInYear($date, $day) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeDayInYear', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     *
     * @param string $date
     * @param int    $day
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeDayInYear()
     */
    public function cantSeeDayInYear($date, $day) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDayInYear', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     *
     * @param string $date
     * @param int    $day
     * @see \Codeception\Module\Date::dontSeeDayInYear()
     */
    public function dontSeeDayInYear($date, $day) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeDayInYear', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is a not given week in the month.
     *
     * @param string $date
     * @param int    $week
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeWeekInMonth()
     */
    public function canSeeWeekInMonth($date, $week) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeWeekInMonth', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is a not given week in the month.
     *
     * @param string $date
     * @param int    $week
     * @see \Codeception\Module\Date::seeWeekInMonth()
     */
    public function seeWeekInMonth($date, $week) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeWeekInMonth', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is a not given week in the month.
     *
     * @param string $date
     * @param int    $week
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeWeekInMonth()
     */
    public function cantSeeWeekInMonth($date, $week) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeWeekInMonth', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is a not given week in the month.
     *
     * @param string $date
     * @param int    $week
     * @see \Codeception\Module\Date::dontSeeWeekInMonth()
     */
    public function dontSeeWeekInMonth($date, $week) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeWeekInMonth', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is a given week in the year.
     *
     * @param string $date
     * @param int    $week
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeWeekInYear()
     */
    public function canSeeWeekInYear($date, $week) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeWeekInYear', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is a given week in the year.
     *
     * @param string $date
     * @param int    $week
     * @see \Codeception\Module\Date::seeWeekInYear()
     */
    public function seeWeekInYear($date, $week) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeWeekInYear', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is not a given week in the year.
     *
     * @param string $date
     * @param int    $week
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeWeekInYear()
     */
    public function cantSeeWeekInYear($date, $week) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeWeekInYear', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the date is not a given week in the year.
     *
     * @param string $date
     * @param int    $week
     * @see \Codeception\Module\Date::dontSeeWeekInYear()
     */
    public function dontSeeWeekInYear($date, $week) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeWeekInYear', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the month in the year is a given value.
     *
     * @param string $date
     * @param int    $month
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::seeMonthInYear()
     */
    public function canSeeMonthInYear($date, $month) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeMonthInYear', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the month in the year is a given value.
     *
     * @param string $date
     * @param int    $month
     * @see \Codeception\Module\Date::seeMonthInYear()
     */
    public function seeMonthInYear($date, $month) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeMonthInYear', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the month in the year is not a given value.
     *
     * @param string $date
     * @param int    $month
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Date::dontSeeMonthInYear()
     */
    public function cantSeeMonthInYear($date, $month) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeMonthInYear', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See the month in the year is not a given value.
     *
     * @param string $date
     * @param int    $month
     * @see \Codeception\Module\Date::dontSeeMonthInYear()
     */
    public function dontSeeMonthInYear($date, $month) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeMonthInYear', func_get_args()));
    }
}
